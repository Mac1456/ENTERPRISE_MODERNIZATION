version: '3.9'

services:
  # Database
  db:
    image: mysql:8.0
    container_name: crm_pro_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
      - ./docker/mysql.cnf:/etc/mysql/conf.d/custom.cnf
    networks:
      - crm_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 5s
      retries: 10

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: crm_pro_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - crm_network
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD}", "ping"]
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    container_name: crm_pro_backend
    restart: unless-stopped
    depends_on:
      - db
      - redis
    environment:
      DB_HOST: db
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      APP_ENV: production
    volumes:
      - ./storage:/var/www/storage
      - ./logs:/var/www/logs
    networks:
      - crm_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/health || exit 1"]
      timeout: 5s
      retries: 5

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: crm_pro_frontend
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - crm_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
      timeout: 5s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: crm_pro_nginx
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx-prod.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    networks:
      - crm_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
      timeout: 5s
      retries: 5

  # Background Jobs (Cron)
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    container_name: crm_pro_scheduler
    restart: unless-stopped
    depends_on:
      - db
      - redis
    environment:
      DB_HOST: db
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      APP_ENV: production
    command: php /var/www/bin/scheduler.php
    volumes:
      - ./storage:/var/www/storage
      - ./logs:/var/www/logs
    networks:
      - crm_network

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local

networks:
  crm_network:
    driver: bridge
